/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.2 .\public\models\cypher.glb
*/

import { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { lerp } from "maath/misc";
import { useShowcase } from "contexts/showcase";

function Cypher(props) {
  const ref = useRef();
  const { scene } = useShowcase();
  const { nodes, materials } = useGLTF("/models/cypher.glb");

  useFrame((_, delta) => {
    const t = new Date().getTime() / 1000;

    ref.current.rotation.x = lerp(
      ref.current.rotation.x,
      scene === 2 ? Math.cos(t / 4) / 8 + 0.5 : 0,
      delta * 2
    );
    ref.current.rotation.y = lerp(
      ref.current.rotation.y,
      scene === 2 ? Math.sin(t / 3) / 4 - 0.2 : 0,
      delta * 2
    );
    ref.current.rotation.z = lerp(
      ref.current.rotation.z,
      scene === 2 ? Math.sin(t / 2) / 8 - 0.25 : 0,
      delta * 2
    );
    ref.current.position.y = lerp(
      ref.current.position.y,
      scene === 2 ? Math.sin(t / 2) / 8 + 1 : 0,
      delta * 2
    );
  });

  return (
    <group {...props} dispose={null} ref={ref}>
      <mesh
        geometry={nodes.Alpha_Board_v2_1.geometry}
        material={materials.PCB}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_2.geometry}
        material={materials.Lead}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_3.geometry}
        material={materials.Color}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_4.geometry}
        material={materials.Color}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_5.geometry}
        material={materials.Markers}
        position={[0, 0.01, 0]}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_6.geometry}
        material={materials.Ceramic}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_7.geometry}
        material={materials.Ceramic}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_8.geometry}
        material={materials.Markers}
        position={[0, 0.01, 0]}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_9.geometry}
        material={materials.Lead}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_10.geometry}
        material={materials.Aluminum}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_11.geometry}
        material={materials.Lead}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_12.geometry}
        material={materials.Markers}
        position={[0, 0.01, 0]}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_13.geometry}
        material={materials.Ceramic}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_14.geometry}
        material={materials.Markers}
        position={[0, 0.01, 0]}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_15.geometry}
        material={materials.Lead}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_16.geometry}
        material={materials.Ceramic}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_17.geometry}
        material={materials.Aluminum}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_18.geometry}
        material={materials.Aluminum}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_19.geometry}
        material={materials.Aluminum}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_20.geometry}
        material={materials.Aluminum}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_21.geometry}
        material={materials.Lead}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_22.geometry}
        material={materials.Aluminum}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_23.geometry}
        material={materials.Plastic}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_24.geometry}
        material={materials.Copper}
      />
      <mesh
        geometry={nodes.Alpha_Board_v2_25.geometry}
        material={materials.Aluminum}
      />
    </group>
  );
}

useGLTF.preload("/models/cypher.glb");
export default Cypher;
